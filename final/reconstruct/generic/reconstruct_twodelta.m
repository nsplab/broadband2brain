function [t, c, sigma, elapsed_time, yguess3, yguess4] = reconstruct_twodelta(y, T, args, prev_data)

ticID = tic;

sigma = 0;  % not used?

% Initially assume that there are no spikes
c = [0; 0];
t = [0; 0];

% Initialize for return (in case if statement doesn't run)
yguess3 = NaN;
yguess4 = NaN;

if (y(1) ~= 0)
    % Non-zero first integral -> must have at least one spike

    % Assume that there is only one spike
    c(1) = y(1);
    t(1) = T - y(2)/c(1);

    % TODO: Fix this here, or fix afterwards?
    if (t(1) < 0)
        t(1) = 0;
    end

    % Based on one spike estimate, predict third and fourth successive integral
    yguess3 = 1/24*(12*(T - t(1))^2*c(1) + c(1)^3 + 12*(T - t(2))^2*c(2) + c(2)^3);
    %yguess4 = 1/24*(4*(T - t(1))^3*c(1) + (T - t(1))*c(1)^3 +  4*(T - t(2))^3*c(2) + (T - t(2))*c(2)^3);

    % Difference of successive integrals from actual values
    diff3 = y(3)-yguess3;
    %diff4 = y(4)-yguess4;

    % Ratio of error to actual value
    ratio3 = (abs(diff3) / y(3));
    %ratio4 = (abs(diff4) / y(4));

    % Used to gather list of ratios (to find empirically good value); Not really needed for now
    % global ratio3list ratio4list
    % ratio3list=[ratio3list ratio3];
    % ratio4list=[ratio4list ratio4];

    %% Empirical values that seem to be okay for identifying multiple spikes
    %if (ratio3 > 0.09 && ratio4 > 0.24)

    % Better threshold from analyze2 (optimize overall probability)
    %if (5.2287*T + 10.6903*ratio3 - 6.7501*ratio4 + 47.8004*T*ratio3 + 30.6266*T*ratio4 - 10.9474*ratio3*ratio4 + 0.8907 > 1.5)
    % Searching a bit more...
    %if (5.8287*T + 155.7037*T*ratio3 - 35.8742*T*ratio4 - 10.9474*ratio3*ratio4 + 0.8907 > 1.5)
    % Weighted correctness (1 spike vs. 2 spike equalized)
    %if (13.8060*T + 177.4607*T*ratio3 - 27.5999*T*ratio4 - 14.7740*ratio3*ratio4 - 1.0292 >= 0)
    % Not linear regression based
    %if (T * ratio4 > 0.0048)
    %if (T^1.4 * ratio4 > 0.0011399)
    %if (T <= 0.0011)
    %    threshold = [0.5523    0.8337    0.4604];
    %elseif (T <= 0.0031)
    %    threshold = [0.4669    0.7969    0.3660];
    %elseif (T <= 0.0051)
    %    threshold = [0.4735    0.8012    0.4151];
    %elseif (T <= 0.0071)
    %    threshold = [0.4685    0.7949    0.3634];
    %elseif (T <= 0.0091)
    %    threshold = [0.4652    0.7975    0.3680];
    %elseif (T <= 0.0151)
    %    threshold = [0.1159    0.4255    0.0361];
    %elseif (T <= 0.0201)
    %    threshold = [0.0972    0.1941    0.0139];
    %elseif (T <= 0.0251)
    %    threshold = [0.0608    0.1554    0.0069];
    %elseif (T <= 0.0301)
    %    threshold = [0.0386    0.1163    0.0070];
    %elseif (T <= 0.0401)
    %    threshold = [0.0247    0.0797    0.0076];
    %elseif (T <= 0.0501)
    %    threshold = [0.0249    0.0702    0.0078];
    %elseif (T <= 0.0601)
    %    threshold = [0.0164    0.0693    0.0076];
    %elseif (T <= 0.0701)
    %    threshold = [0.0154    0.0491    0.0071];
    %elseif (T <= 0.0801)
    %    threshold = [0.0078    0.0202    0.0070];
    %elseif (T <= 0.0901)
    %    threshold = [0.0154    0.0296    0.0071];
    %elseif (T <= 0.1001)
    %    threshold = [0.0151    0.0389    0.0070];
    %end

    %values = [ratio3 ratio4 (ratio3*ratio4)];
    %votes = sum(values >= threshold);
    %if (votes > 2)
    if (ratio3 > 0.01)

        % Attempt to fit as two delta functions
        c(1) = (-T*y(2)^5 + 5*T*y(1)*y(2)^3*y(3) + y(2)^4*y(3) - 6*T*y(1)^2*y(2)*y(3)^2 - 6*y(1)*y(2)^2*y(3)^2 + 8*y(1)^2*y(3)^3 - (T*y(2)^7)/(-y(2)^2 + 2*y(1)*y(3)) + (7*T*y(1)*y(2)^5*y(3))/(-y(2)^2 + 2*y(1)*y(3)) + (y(2)^6*y(3))/(-y(2)^2 + 2*y(1)*y(3)) - (16*T*y(1)^2*y(2)^3*y(3)^2)/(-y(2)^2 + 2*y(1)*y(3)) - (5*y(1)*y(2)^4*y(3)^2)/(-y(2)^2 + 2*y(1)*y(3)) + (12*T*y(1)^3*y(2)*y(3)^3)/(-y(2)^2 + 2*y(1)*y(3)) + (6*y(1)^2*y(2)^2*y(3)^3)/(-y(2)^2 + 2*y(1)*y(3)) - 3*T*y(1)^2*y(2)^2*y(4) + 3*y(1)*y(2)^3*y(4) + 6*T*y(1)^3*y(3)*y(4) - 6*y(1)^2*y(2)*y(3)*y(4) - (3*T*y(1)^2*y(2)^4*y(4))/(-y(2)^2 + 2*y(1)*y(3)) - (3*y(1)*y(2)^5*y(4))/(-y(2)^2 + 2*y(1)*y(3)) + (12*T*y(1)^3*y(2)^2*y(3)*y(4))/(-y(2)^2 + 2*y(1)*y(3)) + (18*y(1)^2*y(2)^3*y(3)*y(4))/(-y(2)^2 + 2*y(1)*y(3)) - (12*T*y(1)^4*y(3)^2*y(4))/(-y(2)^2 + 2*y(1)*y(3)) - (24*y(1)^3*y(2)*y(3)^2*y(4))/(-y(2)^2 + 2*y(1)*y(3)) - (9*y(1)^3*y(2)^2*y(4)^2)/(-y(2)^2 + 2*y(1)*y(3)) + (18*y(1)^4*y(3)*y(4)^2)/(-y(2)^2 + 2*y(1)*y(3)) - (y(2)^5*sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2))/(-y(2)^2 + 2*y(1)*y(3)) + (5*y(1)*y(2)^3*y(3)*sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2))/(-y(2)^2 + 2*y(1)*y(3)) - (6*y(1)^2*y(2)*y(3)^2*sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2))/(-y(2)^2 + 2*y(1)*y(3)) - (3*y(1)^2*y(2)^2*y(4)*sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2))/(-y(2)^2 + 2*y(1)*y(3)) + (6*y(1)^3*y(3)*y(4)*sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2))/(-y(2)^2 + 2*y(1)*y(3)))/(-6*y(2)^2*y(3)^2 + 16*y(1)*y(3)^3 + 12*y(2)^3*y(4) - 36*y(1)*y(2)*y(3)*y(4) + 18*y(1)^2*y(4)^2);
        c(2) = (-T*y(2)^5 + 5*T*y(1)*y(2)^3*y(3) + y(2)^4*y(3) - 6*T*y(1)^2*y(2)*y(3)^2 - 8*y(1)^2*y(3)^3 - (T*y(2)^7)/(-y(2)^2 + 2*y(1)*y(3)) + (7*T*y(1)*y(2)^5*y(3))/(-y(2)^2 + 2*y(1)*y(3)) + (y(2)^6*y(3))/(-y(2)^2 + 2*y(1)*y(3)) - (16*T*y(1)^2*y(2)^3*y(3)^2)/(-y(2)^2 + 2*y(1)*y(3)) - (5*y(1)*y(2)^4*y(3)^2)/(-y(2)^2 + 2*y(1)*y(3)) + (12*T*y(1)^3*y(2)*y(3)^3)/(-y(2)^2 + 2*y(1)*y(3)) + (6*y(1)^2*y(2)^2*y(3)^3)/(-y(2)^2 + 2*y(1)*y(3)) - 3*T*y(1)^2*y(2)^2*y(4) - 9*y(1)*y(2)^3*y(4) + 6*T*y(1)^3*y(3)*y(4) + 30*y(1)^2*y(2)*y(3)*y(4) - (3*T*y(1)^2*y(2)^4*y(4))/(-y(2)^2 + 2*y(1)*y(3)) - (3*y(1)*y(2)^5*y(4))/(-y(2)^2 + 2*y(1)*y(3)) + (12*T*y(1)^3*y(2)^2*y(3)*y(4))/(-y(2)^2 + 2*y(1)*y(3)) + (18*y(1)^2*y(2)^3*y(3)*y(4))/(-y(2)^2 + 2*y(1)*y(3)) - (12*T*y(1)^4*y(3)^2*y(4))/(-y(2)^2 + 2*y(1)*y(3)) - (24*y(1)^3*y(2)*y(3)^2*y(4))/(-y(2)^2 + 2*y(1)*y(3)) - 18*y(1)^3*y(4)^2 - (9*y(1)^3*y(2)^2*y(4)^2)/(-y(2)^2 + 2*y(1)*y(3)) + (18*y(1)^4*y(3)*y(4)^2)/(-y(2)^2 + 2*y(1)*y(3)) - (y(2)^5*sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2))/(-y(2)^2 + 2*y(1)*y(3)) + (5*y(1)*y(2)^3*y(3)*sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2))/(-y(2)^2 + 2*y(1)*y(3)) - (6*y(1)^2*y(2)*y(3)^2*sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2))/(-y(2)^2 + 2*y(1)*y(3)) - (3*y(1)^2*y(2)^2*y(4)*sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2))/(-y(2)^2 + 2*y(1)*y(3)) + (6*y(1)^3*y(3)*y(4)*sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2))/(-y(2)^2 + 2*y(1)*y(3)))/(6*y(2)^2*y(3)^2 - 16*y(1)*y(3)^3 - 12*y(2)^3*y(4) + 36*y(1)*y(2)*y(3)*y(4) - 18*y(1)^2*y(4)^2);
        t(1) = 1/(-y(2)^2+2*y(1)*y(3))*(-2*T*y(2)^2+4*T*y(1)*y(3)+2*y(2)*y(3)-(T*y(2)^4)/(-y(2)^2+2*y(1)*y(3))+(4*T*y(1)*y(2)^2*y(3))/(-y(2)^2+2*y(1)*y(3))+(y(2)^3*y(3))/(-y(2)^2+2*y(1)*y(3))-(4*T*y(1)^2*y(3)^2)/(-y(2)^2+2*y(1)*y(3))-(2*y(1)*y(2)*y(3)^2)/(-y(2)^2+2*y(1)*y(3))-6*y(1)*y(4)-(3*y(1)*y(2)^2*y(4))/(-y(2)^2+2*y(1)*y(3))+(6*y(1)^2*y(3)*y(4))/(-y(2)^2+2*y(1)*y(3))-(y(2)^2*sqrt(-3*y(2)^2*y(3)^2+8*y(1)*y(3)^3+6*y(2)^3*y(4)-18*y(1)*y(2)*y(3)*y(4)+9*y(1)^2*y(4)^2))/(-y(2)^2+2*y(1)*y(3))+(2*y(1)*y(3)*sqrt(-3*y(2)^2*y(3)^2+8*y(1)*y(3)^3+6*y(2)^3*y(4)-18*y(1)*y(2)*y(3)*y(4)+9*y(1)^2*y(4)^2))/(-y(2)^2+2*y(1)*y(3)));
        t(2) = 1/(-y(2)^2+2*y(1)*y(3))*(-T*y(2)^2+2*T*y(1)*y(3)+y(2)*y(3)-3*y(1)*y(4)-sqrt(-3*y(2)^2*y(3)^2+8*y(1)*y(3)^3+6*y(2)^3*y(4)-18*y(1)*y(2)*y(3)*y(4)+9*y(1)^2*y(4)^2));

        % Seems like this claim isn't actually true.
        % I originally thought that NaN was being returned because bootstrap in fig2 was crashing, but it actually seems like an empty list is being passed.
        %% Math seems to be a bit unstable
        %% If NaN results, try using second solution
        %if (any(isnan([c t])))
        %    c(1) = (-T*y(2)^5 + 5*T*y(1)*y(2)^3*y(3) + y(2)^4*y(3) - 6*T*y(1)^2*y(2)*y(3)^2 - 6*y(1)*y(2)^2*y(3)^2 + 8*y(1)^2*y(3)^3 - (T*y(2)^7)/(-y(2)^2 + 2*y(1)*y(3)) + (7*T*y(1)*y(2)^5*y(3))/(-y(2)^2 + 2*y(1)*y(3)) + (y(2)^6*y(3))/(-y(2)^2 + 2*y(1)*y(3)) - (16*T*y(1)^2*y(2)^3*y(3)^2)/(-y(2)^2 + 2*y(1)*y(3)) - (5*y(1)*y(2)^4*y(3)^2)/(-y(2)^2 + 2*y(1)*y(3)) + (12*T*y(1)^3*y(2)*y(3)^3)/(-y(2)^2 + 2*y(1)*y(3)) + (6*y(1)^2*y(2)^2*y(3)^3)/(-y(2)^2 + 2*y(1)*y(3)) - 3*T*y(1)^2*y(2)^2*y(4) + 3*y(1)*y(2)^3*y(4) + 6*T*y(1)^3*y(3)*y(4) - 6*y(1)^2*y(2)*y(3)*y(4) - (3*T*y(1)^2*y(2)^4*y(4))/(-y(2)^2 + 2*y(1)*y(3)) - (3*y(1)*y(2)^5*y(4))/(-y(2)^2 + 2*y(1)*y(3)) + (12*T*y(1)^3*y(2)^2*y(3)*y(4))/(-y(2)^2 + 2*y(1)*y(3)) + (18*y(1)^2*y(2)^3*y(3)*y(4))/(-y(2)^2 + 2*y(1)*y(3)) - (12*T*y(1)^4*y(3)^2*y(4))/(-y(2)^2 + 2*y(1)*y(3)) - (24*y(1)^3*y(2)*y(3)^2*y(4))/(-y(2)^2 + 2*y(1)*y(3)) - (9*y(1)^3*y(2)^2*y(4)^2)/(-y(2)^2 + 2*y(1)*y(3)) + (18*y(1)^4*y(3)*y(4)^2)/(-y(2)^2 + 2*y(1)*y(3)) + (y(2)^5*sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2))/(-y(2)^2 + 2*y(1)*y(3)) - (5*y(1)*y(2)^3*y(3)*sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2))/(-y(2)^2 + 2*y(1)*y(3)) + (6*y(1)^2*y(2)*y(3)^2*sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2))/(-y(2)^2 + 2*y(1)*y(3)) + (3*y(1)^2*y(2)^2*y(4)*sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2))/(-y(2)^2 + 2*y(1)*y(3)) - (6*y(1)^3*y(3)*y(4)*sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2))/(-y(2)^2 + 2*y(1)*y(3)))/(-6*y(2)^2*y(3)^2 + 16*y(1)*y(3)^3 + 12*y(2)^3*y(4) - 36*y(1)*y(2)*y(3)*y(4) + 18*y(1)^2*y(4)^2);
        %    c(2) = (-T*y(2)^5 + 5*T*y(1)*y(2)^3*y(3) + y(2)^4*y(3) - 6*T*y(1)^2*y(2)*y(3)^2 - 8*y(1)^2*y(3)^3 - (T*y(2)^7)/(-y(2)^2 + 2*y(1)*y(3)) + (7*T*y(1)*y(2)^5*y(3))/(-y(2)^2 + 2*y(1)*y(3)) + (y(2)^6*y(3))/(-y(2)^2 + 2*y(1)*y(3)) - (16*T*y(1)^2*y(2)^3*y(3)^2)/(-y(2)^2 + 2*y(1)*y(3)) - (5*y(1)*y(2)^4*y(3)^2)/(-y(2)^2 + 2*y(1)*y(3)) + (12*T*y(1)^3*y(2)*y(3)^3)/(-y(2)^2 + 2*y(1)*y(3)) + (6*y(1)^2*y(2)^2*y(3)^3)/(-y(2)^2 + 2*y(1)*y(3)) - 3*T*y(1)^2*y(2)^2*y(4) - 9*y(1)*y(2)^3*y(4) + 6*T*y(1)^3*y(3)*y(4) + 30*y(1)^2*y(2)*y(3)*y(4) - (3*T*y(1)^2*y(2)^4*y(4))/(-y(2)^2 + 2*y(1)*y(3)) - (3*y(1)*y(2)^5*y(4))/(-y(2)^2 + 2*y(1)*y(3)) + (12*T*y(1)^3*y(2)^2*y(3)*y(4))/(-y(2)^2 + 2*y(1)*y(3)) + (18*y(1)^2*y(2)^3*y(3)*y(4))/(-y(2)^2 + 2*y(1)*y(3)) - (12*T*y(1)^4*y(3)^2*y(4))/(-y(2)^2 + 2*y(1)*y(3)) - (24*y(1)^3*y(2)*y(3)^2*y(4))/(-y(2)^2 + 2*y(1)*y(3)) - 18*y(1)^3*y(4)^2 - (9*y(1)^3*y(2)^2*y(4)^2)/(-y(2)^2 + 2*y(1)*y(3)) + (18*y(1)^4*y(3)*y(4)^2)/(-y(2)^2 + 2*y(1)*y(3)) + (y(2)^5*sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2))/(-y(2)^2 + 2*y(1)*y(3)) - (5*y(1)*y(2)^3*y(3)*sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2))/(-y(2)^2 + 2*y(1)*y(3)) + (6*y(1)^2*y(2)*y(3)^2*sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2))/(-y(2)^2 + 2*y(1)*y(3)) + (3*y(1)^2*y(2)^2*y(4)*sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2))/(-y(2)^2 + 2*y(1)*y(3)) - (6*y(1)^3*y(3)*y(4)*sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2))/(-y(2)^2 + 2*y(1)*y(3)))/(6*y(2)^2*y(3)^2 - 16*y(1)*y(3)^3 - 12*y(2)^3*y(4) + 36*y(1)*y(2)*y(3)*y(4) - 18*y(1)^2*y(4)^2);
        %    t(1) = 1/(-y(2)^2 + 2*y(1)*y(3))*(-2*T*y(2)^2 + 4*T*y(1)*y(3) + 2*y(2)*y(3) - (T*y(2)^4)/(-y(2)^2 + 2*y(1)*y(3)) + (4*T*y(1)*y(2)^2*y(3))/(-y(2)^2 + 2*y(1)*y(3)) + (y(2)^3*y(3))/(-y(2)^2 + 2*y(1)*y(3)) - (4*T*y(1)^2*y(3)^2)/(-y(2)^2 + 2*y(1)*y(3)) - (2*y(1)*y(2)*y(3)^2)/(-y(2)^2 + 2*y(1)*y(3)) - 6*y(1)*y(4) - (3*y(1)*y(2)^2*y(4))/(-y(2)^2 + 2*y(1)*y(3)) + (6*y(1)^2*y(3)*y(4))/(-y(2)^2 + 2*y(1)*y(3)) + (y(2)^2*sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2))/(-y(2)^2 + 2*y(1)*y(3)) - (2*y(1)*y(3)*sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2))/(-y(2)^2 + 2*y(1)*y(3)));
        %    t(2) = 1/(-y(2)^2 + 2*y(1)*y(3))*(-T*y(2)^2 + 2*T*y(1)*y(3) + y(2)*y(3) - 3*y(1)*y(4) + sqrt(-3*y(2)^2*y(3)^2 + 8*y(1)*y(3)^3 + 6*y(2)^3*y(4) - 18*y(1)*y(2)*y(3)*y(4) + 9*y(1)^2*y(4)^2));

        %    global NaNCount1
        %    NaNCount1 = [NaNCount1 0];
        %end

        %% Math seems to be a bit unstable
        %% If NaN results, just use 1 spike
        %if (any(isnan([c t])))
        %    c = [0; 0];
        %    t = [0; 0];
        %    c(1) = y(1);
        %    t(1) = T - y(2)/c(1);

        %    global NaNCount2
        %    NaNCount2 = [NaNCount2 0];
        %end
    end


end

elapsed_time = toc(ticID);

end
